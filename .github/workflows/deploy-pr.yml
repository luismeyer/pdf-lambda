name: Deploy PR to dev stage

on:
  issue_comment:
    types: [created]

jobs:
  client:
    if: github.event.comment.body == '@github-actions deploy'
    runs-on: ubuntu-latest

    steps:
      - name: Setup
        id: setup
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pullResponse = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            const headSha = pullResponse.data.head.sha

            const checkResponse = await github.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "Deploy PR to dev stage",
              head_sha: headSha,
              status: "in_progress",
              output: {
                title: "Deploy PR status",
                summary: "Starting deployment..."
              }
            });

            core.setOutput('check_id', `${checkResponse.data.id}`);
            core.setOutput('sha', `${headSha}`);

      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.setup.outputs.sha }}

      - name: Install
        run: npm install

      - name: Setup
        run: npm run setup
        env:
          GITHUB_SHA: ${{ steps.setup.outputs.sha }}

      - name: Serverless create domain
        uses: serverless/github-action@master
        with:
          args: create_domain
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Serverless deploy
        uses: serverless/github-action@master
        with:
          args: deploy --stage dev
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Clean Up
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const status = "${{ job.status }}";
            const conclusion = status == 'success' || status == 'cancelled' ? status : 'failure';

            await github.checks.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              check_run_id: "${{ steps.setup.outputs.check_id }}",
              status: "completed",
              conclusion,
              output: {
                title: "Deploy PR status",
                summary: "Deployed to https://dev-pdf.luimey.de"
              }
            });
